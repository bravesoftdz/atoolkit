{**
@Abstract(Модуль работы с XVRML)
@Author(Prof1983 prof1983@ya.ru)
@Created(14.03.2007)
@LastMod(27.04.2012)
@Version(0.5)

http://www.chemistry.ssu.samara.ru/vrml/vrml.htm
VRML (Virtual Reality Modeling Language - язык моделирования виртуальной
реальности) - одна из технологий мультимедиа, позволяющая передавать по
Интернет похожие на реальные модели виртуального мира. Использование в
данном учебнике VRML-моделей атомов и молекул предназначено для формирования
более ясного представления о пространственном строении органических соединений.
Управлять этими моделями можно с помощью мыши и клавиатуры. Вы можете
поворачивать модель в разные стороны, заставлять ее вращаться, рассматривать
сцену с нескольких позиций, переключая камеры (Camera 01, 02, ...) и т.д.
Для просмотра VRML-объектов используются различные программы-брaузеры. Мы
рекомендуем Cosmo Player или Cortona (Parallel Graphics), отличающиеся
высоким качеством отображения виртуального мира.

http://www.citforum.ru/internet/vrml/
VRML в примерах. Марина Миланина, Diamond Team

Что такое VRML
Язык VRML (Virtual Realty Modelling Languagy) предназначен для описания трехмерных изображений и оперирует объектами, описывающими геометрические фигуры и их расположение в пространстве.
Vrml-файл представляет собой обычный текстовый файл, интерпретируемый браузером. Поскольку большинство браузеров не имеет встроенных средств поддержки vrml, для просмотра Vrml-документов необходимо подключить вспомогательную программу - Vrml-браузер, например, Live3D или Cosmo Player.
Как и в случае с HTML, один и тот же vrml-документ может выглядеть по-разному в разных VRML-браузерах. Кроме того, многие разработчики VRML-браузеров добавляют нестандартные расширения VRML в свой браузер.
Существует немало VRML-редакторов, делающих удобней и быстрее процесс создания Vrml-документов, однако несложные модели, рассматриваемые в данной статье, можно создать при помощи самого простого текстового редактора.

Единицы измерения
В VRML приняты следующие единицы измерения: 
Расстояние и размер: метры 
Углы: радианы 
Остальные значения: выражаются, как часть от 1. 
Координаты берутся в трехмерной декартовой системе координат

Заголовок VRML-файла
Как уже говорилось, Vrml-документ представляет собой обычный тестовый файл.
Для того, чтобы VRML-браузер распознал файл с VRML-кодом, в начале файла ставится специальный заголовок - file header:
#VRML V1.0 ascii
Такой заголовок обязательно должен находиться в первой строке файла, кроме того, перед знаком диеза не должно быть пробелов.

Примитивы VRML
В VRML определены четыре базовые фигуры: куб (верней не куб, а прямоугольный параллепипед), сфера, цилиндр и конус.
Эти фигуры называются примитивами (primitives). Набор примитивов невелик, однако комбинируя их, можно строить достаточно сложные трехмерные изображения. Например, вот такие:
Рассмотрим поподробней каждый из примитивов.
--- Куб ---
Возможные параметры: width - ширина, height - высота, depth - глубина.
     Cube
        width   2    # ширина
        height  3    # высота
        depth   1    # глубина

--- Сфера ---
Параметр у сферы только один, это radius.
    Sphere
        radius  1    # радиус

--- Конус ---
Возможные параметры: bottomRadius - радиус основания, height - высота, parts - определяет, какие части конуса будут видны. Параметр parts может принимать значения ALL, SIDES или BOTTOM.
     Cone
        parts           ALL      #видны и основание, и боковая поверхность конуса
        bottomRadius    1        #радиус основания
        height          2        #высота

--- Цилиндр ---
Для цилиндра можно задать параметры radius и height. Кроме того, с помощью параметра parts для цилиндра можно определить будут ли отображаться основания цилиндра и его боковая поверхность. Параметр parts может принимать значения ALL, SIDES, BOTTOM или TOP.
      Cylinder
          parts   ALL      #видны все части цилиндра
          radius  1        #радиус основания
          height  2        #высота цилиндра
----------------------------------------------
Цвет и текстура

Цвет фигуры, определяется с помощью объекта Material. 

    Material {

         ambientColor    0.2 0.2 0.2

         diffuseColor    0.8 0.8 0.8

         specularColor   0 0 0

         emissiveColor   0 0 0

         transparency    0




Параметры ambientColor, diffuseColor, specularColor и emissiveColor управляют цветами и указываются в палитре RGB (красный, зеленый и голубой), причем первая цифра определяет интенсивность красного цвета, вторая - зеленого, а третья - синего. 

К примеру, синий кубик, может быть описан следующим образом: 

    #VRML V1.0 ascii

        Material {

               diffuseColor 0 0 1



        Cube


Параметр transparency может принимать значения от 0 до1 и определяет степень прозрачности, причем максимальная прозрачность достигается при transparency равном единице. В приведенном примере описано два цилиндра разных размеров, меньший из которых просвечивает сквозь другой. 

    #VRML V1.0 ascii

       Material {

	      diffuseColor 0 0 1

          transparency    0.7



       Cylinder {

          height  1

          radius  1



       Material {

          emissiveColor    1 0 0

          transparency    0



       Cylinder {

          height  0.8

          radius  0.1




Для имитирования различных поверхностей в VRML существует объект Texture2. 

В качестве текстуры легче всего использовать обычный графический файл, например, в GIF-формате. В таком случае для "натягивания" текстуры на трехмерное изображение нужно только указать путь к файлу в параметре filename объекта Texture2. 

.     #VRML V1.0 ascii

     Texture2 {

                 filename    "krp.gif"

                 image       0 0 0

                 wrapS REPEAT 

                 wrapT REPEAT



     Cube { 

                 width 1

                 height 1

                 depth 1 



 

Параметры wrapS и wrapT могут принимать значения REPEAT или CLAMP, и управляют натягиванием текстуры по соответственно горизонтальной и вертикальной осям.
}

unit AXVrml;

interface

type
  TXVrmlString = WideString;

const
  VRML_HEAD = '#VRML V1.0 ascii';
  VRML_PARTS = 'parts';   // видимость частей
  VRML_PARTS_ALL = 'all'; // видны и основание, и боковая поверхность конуса

const
  VRML_CONE = 'cone';            // Конус
  VRML_CONE_BOTTOM_RADIUS = 'bottomRadius'; // радиус основания
  VRML_CONE_HEIGHT = 'height';   // высота
  VRML_CONE_PARTS = VRML_PARTS;
  VRML_CYLINDER = 'cylinder';    // Цилиндр
  VRML_CYLINDER_PARTS = VRML_PARTS;
  VRML_CUBE = 'cube';            // Куб
  VRML_CUBE_WIDTH  = 'width';    // ширина
  VRML_CUBE_HEIGHT = 'height';   // высота
  VRML_CUBE_DEPTH  = 'depth';    // глубина
  VRML_SPHERE = 'sphere';        // Сфера
  VRML_SPHERE_RADIUS = 'radius'; // радиус

implementation

end.

// --- ASystemData ---

  {** Полный путь и имя выполняемого файла }
  FExeFileName: APascalString; // "Program1.exe"
  {** Имя выполняемого файла }
  FExeName: APascalString;     // "Program1"      
  {** Путь к выполняемому файлу }
  FExePath: APascalString;     // "C:\Programs\Program1\"  

// --- ASystem ---

{** Возвращает наименование компании }
function Info_GetCompanyName(out Value: AString_Type): AInteger; stdcall;

{** Возвращает наименование компании }
function Info_GetCompanyNameP: APascalString; stdcall;

{** Возвращает наименование компании }
function Info_GetCompanyNameWS(): AWideString; stdcall;

{** Возвращает комментарий к программе }
function Info_GetCommentsWS(): AWideString; stdcall;

{** Возвращает информацию о правах }
function Info_GetCopyright(out Value: AString_Type): AInteger; stdcall;

{** Возвращает информацию о правах }
function Info_GetCopyrightP: APascalString; stdcall;

{** Возвращает информацию о правах }
function Info_GetCopyrightWS(): AWideString; stdcall;

{** Возвращает полный путь к директории с данными }
function Info_GetDataDirectoryPathP: APascalString; stdcall;

{** Возвращает полный путь к директории с данными }
function Info_GetDataDirectoryPathWS(): AWideString; stdcall;

{** Возвращает описание программы (Runtime_GetDescription) }
function Info_GetDescription(out Value: AString_Type): AInteger; stdcall;

{** Возвращает описание программы }
function Info_GetDescriptionP: APascalString; stdcall;

{** Возвращает описание программы }
function Info_GetDescriptionWS(): AWideString; stdcall;

{** Возвращает наименование продукта (Runtime_GetProductName) }
function Info_GetProductName(out Value: AString_Type): AInteger; stdcall;

{** Возвращает наименование продукта (Runtime_GetProductName) }
function Info_GetProductNameP: APascalString; stdcall;

{** Возвращает наименование продукта (Runtime_GetProductName) }
function Info_GetProductNameWS(): AWideString; stdcall;

{** Возвращает версию продукта }
function Info_GetProductVersion(): AVersion; stdcall;

{** Возвращает версию продукта }
function Info_GetProductVersionStrP: APascalString; stdcall; deprecated;

{** Возвращает версию продукта }
function Info_GetProductVersionStrWS(): AWideString; stdcall;

{** Возвращает наименование программы (Runtime_GetProgramName) }
function Info_GetProgramName(out Value: AString_Type): AInteger; stdcall;

{** Возвращает наименование программы (Runtime_GetProgramName) }
function Info_GetProgramNameP: APascalString; stdcall;

{** Возвращает наименование программы (Runtime_GetProgramName) }
function Info_GetProgramNameWS(): AWideString; stdcall;

{** Возвращает версию программы }
function Info_GetProgramVersion(): AVersion; stdcall;

{** Возвращает версию программы }
function Info_GetProgramVersionStrP: APascalString; stdcall;

{** Возвращает версию программы }
function Info_GetProgramVersionStrWS(): AWideString; stdcall;

{** Возвращает заголовок (краткое наименование) программы }
function Info_GetTitle(out Value: AString_Type): AInteger; stdcall;

{** Возвращает заголовок (краткое наименование) программы }
function Info_GetTitleP: APascalString; stdcall;

{** Возвращает заголовок (краткое наименование) программы }
function Info_GetTitleWS(): AWideString; stdcall;

{** Возвращает адрес сайта программы в интернете (Runtime_GetUrl) }
function Info_GetUrl(out Value: AString_Type): AInteger; stdcall;

{** Возвращает адрес сайта программы в интернете (Runtime_GetUrl) }
function Info_GetUrlP: APascalString; stdcall;

{** Возвращает адрес сайта программы в интернете (Runtime_GetUrl) }
function Info_GetUrlWS(): AWideString; stdcall;

{** Возвращает наименование компании (Runtime_GetCompanyName) }
function Info_CompanyName: APascalString; stdcall; deprecated;

{** Возвращает информацию о правах }
function Info_Copyright: APascalString; stdcall; deprecated;

{** Возвращает описание программы }
function Info_Description: APascalString; stdcall; deprecated;

{** Возвращает наименование продукта (Runtime_GetProductName) }
function Info_ProductName: APascalString; stdcall; deprecated;

{** Возвращает версию продукта (Runtime_GetProductVersion) }
function Info_ProductVersion: AVersion; stdcall;

{** Возвращает версию продукта }
function Info_ProductVersionStr: APascalString; stdcall; deprecated;

{** Возвращает наименование программы (Runtime_GetProgramName) }
function Info_ProgramName: APascalString; stdcall; deprecated;

{** Возвращает версию программы (Runtime_GetProgramVersion) }
function Info_ProgramVersion: AVersion; stdcall;

{** Возвращает версию программы }
function Info_ProgramVersionStr: APascalString; stdcall; deprecated;

{** Возвращает заголовок (краткое наименование) программы }
function Info_Title: APascalString; stdcall; deprecated;

{** Возвращает адрес сайта программы в интернете (Runtime_GetUrl) }
function Info_Url: APascalString; stdcall; deprecated;

{** Возвращает параметр }
function ParamStr(Index: AInteger; out Value: AString_Type): AInteger; stdcall;

{** Возвращает параметр }
function ParamStrP(Index: AInteger): APascalString; stdcall;

{** Возвращает параметр }
function ParamStrWS(Index: AInteger): AWideString; stdcall;

{** Обрабатывает сообщения от ОС }
function ProcessMessages(): AError; stdcall;

{** Обрабатывает сообщения от ОС }
procedure ProcessMessages02(); stdcall;

{** Выводит сообщение и ждет потверджения }
function ShowMessage(const Msg: AString_Type): ADialogBoxCommands; stdcall;

{** Выводит сообщение и ждет потверджения }
function ShowMessage02(const Msg: AWideString): ADialogBoxCommands; stdcall;

{** Выводит сообщение и ждет потверджения }
function ShowMessage2P(const Text, Caption: APascalString; Flags: AMessageBoxFlags
    ): ADialogBoxCommands; stdcall; deprecated; // Use ShowMessageExP()

{** Выводит сообщение и ждет потверджения }
function ShowMessageA(const Msg: PAnsiChar): ADialogBoxCommands; stdcall;

{** Выводит сообщение и ждет потверджения }
function ShowMessageEx(const Text, Caption: AString_Type; Flags: AMessageBoxFlags): ADialogBoxCommands; stdcall;

{** Выводит сообщение и ждет потверджения }
function ShowMessageExA(const Text, Caption: PAnsiChar; Flags: AMessageBoxFlags): ADialogBoxCommands; stdcall;

{** Выводит сообщение и ждет потверджения }
function ShowMessageExP(const Text, Caption: APascalString; Flags: AMessageBoxFlags): ADialogBoxCommands; stdcall;

{** Выводит сообщение и ждет потверджения }
function ShowMessageExWS(const Text, Caption: AWideString; Flags: AMessageBoxFlags): ADialogBoxCommands; stdcall;

{** Выводит сообщение и ждет потверджения }
function ShowMessageP(const Msg: APascalString): ADialogBoxCommands; stdcall;

{** Выводит сообщение и ждет потверджения }
function ShowMessageWS(const Msg: AWideString): ADialogBoxCommands; stdcall;

{** Подключает к событию }
function OnBeforeRun_Connect(Callback: ACallbackProc; Weight: AInteger = High(AInteger)): AInteger; stdcall;

{** Отключает от события }
function OnBeforeRun_Disconnect(Callback: ACallbackProc): AInteger; stdcall;

{** Открывает модуль (библиотеку). Возвращяет идентификатор. }
function Library_Open(const FileName: AString_Type; Flags: ALibraryFlags): ALibrary; stdcall;

{** Открывает модуль (библиотеку). Возвращяет идентификатор. }
function Library_OpenP(const FileName: APascalString; Flags: ALibraryFlags): ALibrary; stdcall;

{** Открывает модуль (библиотеку). Возвращяет идентификатор. }
function Library_OpenS({const} FileName: AString; Flags: ALibraryFlags): ALibrary; stdcall;

{** Открывает модуль (библиотеку). Возвращяет идентификатор. }
function Library_OpenWS(const FileName: AWideString; Flags: ALibraryFlags): ALibrary; stdcall;

{** Закрывает модуль (библиотеку) }
function Library_Close(Lib: ALibrary): ABoolean; stdcall;

{** Возвращает адрес функции }
function Library_GetProcAddress(Lib: ALibrary; const Name: AString_Type): Pointer; stdcall;

{** Возвращает адрес функции }
function Library_GetProcAddressP(Lib: ALibrary; const Name: APascalString): Pointer; stdcall;

{** Возвращает адрес функции }
function Library_GetProcAddressS(Lib: ALibrary; {const} Name: AString): Pointer; stdcall;

{** Возвращает адрес функции }
function Library_GetProcAddressWS(Lib: ALibrary; const Name: AWideString): Pointer; stdcall;

{** Возвращает адрес функции }
function Library_GetSymbol(Lib: ALibrary; {const} SymbolName: AString; {var} Symbol: PPointer): ABoolean; stdcall;

{** Возвращает адрес функции }
function Library_GetSymbolP(Lib: ALibrary; const SymbolName: APascalString; var Symbol: Pointer): ABoolean; stdcall;

{** Возвращает адрес функции }
function Library_GetSymbolS(Lib: ALibrary; const SymbolName: AString_Type; var Symbol: Pointer): ABoolean; stdcall;

{** Возвращает наименование программы }
function GetProgramName(): APascalString; stdcall; deprecated; // Use GetProgramNameWS

{** Возвращает наименование программы }
function GetProgramNameWS(): AWideString; stdcall;

{** Возвращает наименование программы }
function GetTitleWS(): AWideString; stdcall;

{** Возвращает полный путь к директории с данными }
function GetDataDirectoryPathWS(): APascalString; stdcall;

{** Возвращает полный путь к директории с данными }
function GetDataPath: APascalString; stdcall; //deprecated; // Use GetDataDirectoryPathWS()

{** Возвращает ресурс в виде строки }
function GetResourceString(const Section, Name, Default: AString_Type;
    out Value: AString_Type): AInteger; stdcall;

{** Возвращает ресурс в виде строки }
function GetResourceStringWS(const Section, Name, Default: AWideString): AWideString; stdcall;

{** Возвращяет указатель на конфигурацию программы }
function GetConfig(): AConfig; stdcall;

{** Возвращент True, если получена команда на завершение работы }
function GetIsShutdown(): ABoolean; stdcall;

{** Завершает работу программы }
procedure Shutdown(); stdcall;

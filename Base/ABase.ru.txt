AId - Идентификатор. Глобальный тип для использования во всех модулях.
    Номер 0 может использоваться для хранения глобальных параметров системы.
    Номера от 0 до 1023 заререзвированы.
    Номер 1024 используется для хранения настроек программы.
    Номера от 1025 до 2047 используются для определения внутренних типов программы.
    Номера от 2028 до 65535 зарезервированы.
    Номера от 65535 до 2^31 используются свободно для локального приложения.
    Использование номеров от 2^32 до 2^63 выделяются сервером системы.
    Сущности с номерами от 2^32 хранятся на сервере
    (локальные копии могут хранится на локальном компьютере).
    Аналог: org.framerd.OID.OID


=== ABaseUtils2 ===

Базовый модуль основных типов и их преобразования.

{** Разделение строка на части. Разделитель #9 }
function cStringToArrayString(Value: string): TArrayString;

{** Преобразует строку к виду ... F0 A1 B2 ...
    @param Delimer - Разделитель }
function cStrToHex(Value: string; Delimiter: string = ''): string;

{** Сравнивает 2 строки
    @return - Позиция, в которой строки имеют различия или 0, если они одинаковые }
function strEqual(Str1, Str2: string): UInt32;

{ A1-коэффициент, учитывающий разницу длин строк (0..1)
  A2-коэффициент, учитывающий сдвиг сравниваемых строк (0..1)
  A3-коэффициент, учитывающий несоответствие букв (0..1)
  Результат (0..1) 0 - не похоже, 1 - похоже }
function strEqual2(S1, S2: string; A1: Float64 = 0; A2: Float64 = 0; A3: Float64 = 0): Float64;

{** Выделяет слово Num по счету c разделителями Delims }
function StrExtractWord(Num: Integer; Str: WideString; Delims: TArrayChar): WideString;

{** Вставляет подстроку SubSt в строку St, начиная с символа с номеров Index }
procedure strInsert(var S: String; SubSt: String; Index: UInt32);

{** Возвращает длину строки }
function strLength(const S: String): UInt32;

{** Возвращает в строке St первое вхождение подстроки SubSt и возвращает номер позиции с которой она начинается. Если подстрока не найдена, возвращает ноль. }
function strPos(St: String; SubSt: String): UInt32;

{** Ищет в строке первое вхождение . ! ? ...
    @param S  - Строка
    @param Ch - (out) Код окончания предложения
    @return - Позиция в строке или 0, если не найдено }
function strPos3(S: String; var Ch: TStrPosChar): UInt32;

{** Ищет индекс символа C в строке St с конца строки. Возвращает 0, если символ не найден.
    @param St - Строка
    @param C - Символ }
function StrPosEnd(const St: WideString; C: WideChar): Integer;

{** Преобразует символы, записанные в виде URLencoded }
function urlDecode(Value: string): string;

function urlDecode(Value: string): string;

{** Возвращает значение атрибута заданного в качестве параметра функции из строки данных }
function urlParamByName(InParams: TUrlParams; Name: string): string;

{** Удаление префиксных, постфиксных, повторяющихся пробелов и префиксных и поствиксных #13#10 }
function _StrDeleteSpace(var S: APascalString; Options: TDeleteSpaceOptionSet): AError;

{** Переводит строку со спец символими в строку Html формата со спецсимволами }
function StrHtmlFromStr(Value: string): string;

{** Переводит строку Html формата с тегами в простую строку с символами }
function StrHtmlToStr(Value: WideString): WideString;

{** Вычисляет реальную длину (без учета конца строки #0) }
function strLength(const S: String): UInt32;

{** Ищет индекс символа C в строке St с конца строки }
function StrPosEnd(const St: WideString; C: WideChar): Integer;

{** Фнкция возвращает значение атрибута заданного в качестве параметра функции из строки данных }
function urlParamByName(InParams: TUrlParams; Name: string): string;


=== ABaseUtils3 ===
Базовый модуль основных типов и их преобразования.

{** Конвертирует тип TDateTime064 в String }
function cDateTime64ToStrF(Format: TDateTimeFormat; T: TDateTime64): string;

{** Делает все заглавные буквы строчными }
function cStrCaseLower(St: string): string;

{** Делает все строчныме буквы заглавными }
function cStrCaseUpper(St: string): string;

{** Заменяет все строчные буквы на заглавные с учетом русских букв }
procedure strCaseUpper(var S: string);

{** Разделяет строку на слова и выражения, удаляет префиксные и постфиксные пробелы. Разделителем является запятая.
    @param Words - Слова и выражения по порядку (out)
    @return - Номер символа, в котором произошла ошибка или 0, если успешно }
function strDivisionComma(const S: string; var Words: TArrayString): UInt032;

{** Возвращает текущее время }
function timeNow: TDateTime64;

{** Конвертирует тип TDateTime064 в String
    @param T   - Значение
    @param Typ - Вид вывода 0-Дата+Время, 1-Дата, 2-Время }
function cDateTime64ToStr2(T: TDateTime64; Typ: TConvertDT): string;

{** Вводит тезультат с разделителем - точкой }
function cFloat64ToStrP(Value: Float64): String;
